<?xml version="1.0" encoding="utf-8" ?>
<app:BasePage
    x:Class="MAUIsland.TableViewPage"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:app="clr-namespace:MAUIsland"
    Title="Table View"
    Padding="20"
    x:DataType="app:TableViewPageViewModel">
    <app:BasePage.Resources>
        <x:String x:Key="ControlInfo">
            The .NET Multi-platform App UI (.NET MAUI) TableView displays a table of scrollable items that can be grouped into sections. A TableView is typically used for displaying items where each row has a different appearance, such as presenting a table of settings.
        </x:String>

        <x:String x:Key="ControlInfo1">
            To create a table, create a TableView object and set its Intent property to a TableIntent member. The child of a TableView must be a TableRoot object, which is parent to one or more TableSection objects. Each TableSection consists of an optional title whose color can also be set, and one or more Cell objects.
        </x:String>

        <x:String x:Key="ControlInfo2">
            Each item in a TableView is defined by a Cell object, and the Cell type used defines the appearance of the cell's data. .NET MAUI includes the following built-in cells:
        </x:String>

        <x:String x:Key="ControlInfo3">
            An ImageCell displays an image with primary and secondary text on separate lines. ImageCell inherits the properties from TextCell, and defines the ImageSource property, of type ImageSource, which specifies the image to be displayed in the cell. This property is backed by a BindableProperty object, which means it can be the target of data bindings, and be styled.
        </x:String>

        <x:String x:Key="ControlInfo4">
            A ViewCell is a custom cell whose appearance is defined by a View. ViewCell defines a View property, of type View, which defines the view that represents the content of the cell. This property is backed by a BindableProperty object, which means it can be the target of data bindings, and be styled.
        </x:String>

        <x:String x:Key="ControlInfo5">
            TableView can layout its content in a right-to-left flow direction by setting its FlowDirection property to RightToLeft. However, the FlowDirection property should ideally be set on a page or root layout, which causes all the elements within the page, or root layout, to respond to the flow direction:
        </x:String>

        <x:String x:Key="PropertiesListHeader">
            TableView defines the following properties:
        </x:String>

        <x:String x:Key="PropertiesListHeader1">
            The value of the Intent property helps to define the TableView appearance on iOS only. This property should be set to a value of the TableIntent enumeration, which defines the following members:
        </x:String>

        <x:String x:Key="PropertiesListHeader2">
            A TextCell displays primary and secondary text on separate lines. TextCell defines the following properties:
        </x:String>

        <x:String x:Key="PropertiesListHeader3">
            A SwitchCell displays text and a switch that can be switched on or off. SwitchCell defines the following properties:
        </x:String>

        <x:String x:Key="PropertiesListHeader4">
            An EntryCell displays a label and text data that's editable. EntryCell defines the following properties:
        </x:String>

        <x:String x:Key="PropertiesListFooter">
            The HasUnevenRows and RowHeight properties are backed by BindableProperty objects, which means that they can be targets of data bindings, and styled.
        </x:String>

        <x:String x:Key="PropertiesListFooter1">
            These properties are backed by BindableProperty objects, which means that they can be targets of data bindings, and styled.
        </x:String>

        <x:String x:Key="PropertiesListFooter2">
            These properties are backed by BindableProperty objects, which means that they can be targets of data bindings, and styled.
        </x:String>

        <x:String x:Key="PropertiesListFooter3">
            These properties are backed by BindableProperty objects, which means that they can be targets of data bindings, and styled.
        </x:String>

        <x:Array x:Key="PropertyItemsSource" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[
                                <strong style="color:blue">Intent</strong>, of type <strong style="color:blue">TableIntent</strong>, defines the purpose of the table on iOS.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">HasUnevenRows</strong>, of type <strong style="color:blue">bool</strong>, indicates whether items in the table can have rows of different heights. The default value of this property is <strong style="color:blue">false</strong>.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Root</strong>, of type <strong style="color:blue">TableRoot</strong>, defines the child of the TableView.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">RowHeight</strong>, of type <strong style="color:blue">int</strong>, determines the height of each row when <strong style="color:blue">HasUnevenRows</strong> is <strong style="color:blue">false</strong>.
                            ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="PropertyItemsSource1" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[
                                <strong style="color:blue">Menu</strong>, for presenting a selectable menu.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Setting</strong>, for presenting a table of configuration settings.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Form</strong>, for presenting a data input form.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Data</strong>, for presenting data.
                            ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="PropertyItemsSource2" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[
                                <strong style="color:blue">TextCell</strong>, which displays primary and secondary text on separate lines.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">ImageCell</strong>, which displays an image with primary and secondary text on separate lines.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">SwitchCell</strong>, which displays text and a switch that can be switched on or off.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">EntryCell</strong>, which displays a label and text that's editable.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">ViewCell</strong>, which is a custom cell whose appearance is defined by a <strong style="color:blue">View</strong>. This cell type should be used when you want to fully define the appearance of each item in a <strong style="color:blue">TableView</strong>.
                            ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="PropertyItemsSource3" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[
                                <strong style="color:blue">Text</strong>, of type <strong style="color:blue">string</strong>, defines the primary text to be displayed.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">TextColor</strong>, of type <strong style="color:blue">Color</strong>, represents the color of the primary text.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Detail</strong>, of type <strong style="color:blue">string</strong>, defines the secondary text to be displayed.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">DetailColor</strong>, of type <strong style="color:blue">color</strong>, indicates the color of the secondary text.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Command</strong>, of type <strong style="color:blue">ICommand</strong>, defines the command that's executed when the cell is tapped.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">CommandParameter</strong>, of type <strong style="color:blue">object</strong>, represents the parameter that's passed to the command.
                            ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="PropertyItemsSource4" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[
                                <strong style="color:blue">Text</strong>, of type <strong style="color:blue">string</strong>, defines the text to display next to the switch.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">On</strong>, of type <strong style="color:blue">bool</strong>, represents whether the switch is on or off.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">OnColor</strong>, of type <strong style="color:blue">Color</strong>, indicates the color of the switch when in it's on position.
                            ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="PropertyItemsSource5" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[
                                <strong style="color:blue">HorizontalTextAlignment</strong>, of type <strong style="color:blue">TextAlignment</strong>, represents the horizontal alignment of the text.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Keyboard</strong>, of type <strong style="color:blue">Keyboard</strong>, determines the keyboard to display when entering text.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Label</strong>, of type <strong style="color:blue">string</strong>, represents the text to display to the left of the editable text.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">LabelColor</strong>, of type <strong style="color:blue">Color</strong>, defines the color of the label text.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Placeholder</strong>, of type <strong style="color:blue">string</strong>, represents the text that's displayed when the <strong style="color:blue">Text</strong> property is empty.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">Text</strong>, of type <strong style="color:blue">string</strong>, defines the text that's editable.
                            ]]>
            </x:String>

            <x:String>
                <![CDATA[
                                <strong style="color:blue">VerticalTextAlignment</strong>, of type <strong style="color:blue">TextAlignment</strong>, represents the vertical alignment of the text.
                            ]]>
            </x:String>
        </x:Array>

    </app:BasePage.Resources>
    <app:BasePage.ToolbarItems>
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.GitHubUrl}"
            IconImageSource="github.png"
            Text="Source code" />
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.DocumentUrl}"
            IconImageSource="microsoft.png"
            Text="Original Document" />
    </app:BasePage.ToolbarItems>
    <ScrollView>
        <VerticalStackLayout Spacing="20">
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <Label Text="{x:StaticResource ControlInfo}" />
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <CollectionView
                    Footer="{x:StaticResource PropertiesListFooter}"
                    Header="{x:StaticResource PropertiesListHeader}"
                    ItemsSource="{x:StaticResource PropertyItemsSource}"
                    Style="{x:StaticResource PropertiesListStyle}" />
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <CollectionView
                    Header="{x:StaticResource PropertiesListHeader1}"
                    ItemsSource="{x:StaticResource PropertyItemsSource1}"
                    Style="{x:StaticResource PropertiesListStyle}" />
            </Frame>

            <!--  Create a TableView  -->
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Create a TableView" />
                    <Label Text="{x:StaticResource ControlInfo1}" />
                    <Label Text="The following example shows how to create a TableView:" />
                    <TableView Intent="Menu">
                        <TableRoot>
                            <TableSection Title="Chapters">
                                <TextCell Detail="Learn about .NET MAUI and what it provides." Text="1. Introduction to .NET MAUI" />
                                <TextCell Detail="Learn about the visual elements in .NET MAUI" Text="2. Anatomy of an app" />
                                <TextCell Detail="Learn about the .NET MAUI controls that display text." Text="3. Text" />
                                <TextCell Detail="Learn how to size .NET MAUI controls on screen." Text="4. Dealing with sizes" />
                                <TextCell Detail="Learn more about creating your UI in XAML." Text="5. XAML vs code" />
                            </TableSection>
                        </TableRoot>
                    </TableView>
                    <app:SourceCodeExpander XamlCode="{x:Binding StandardTableViewXamlCode}" />
                </VerticalStackLayout>
            </Frame>

            <!--  Define cell appearance  -->
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Define cell appearance" />
                    <Label Text="{x:StaticResource ControlInfo2}" />
                    <CollectionView ItemsSource="{x:StaticResource PropertyItemsSource2}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <!--  Text cell  -->
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <CollectionView
                        Footer="{x:StaticResource PropertiesListFooter2}"
                        Header="{x:StaticResource PropertiesListHeader2}"
                        ItemsSource="{x:StaticResource PropertyItemsSource3}"
                        Style="{x:StaticResource PropertiesListStyle}" />
                    <Label Text="The following example shows using a TextCell to define the appearance of items in a TableView:" />
                    <TableView Intent="Menu">
                        <TableRoot>
                            <TableSection Title="Chapters">
                                <TextCell Detail="Learn about .NET MAUI and what it provides." Text="1. Introduction to .NET MAUI" />
                                <TextCell Detail="Learn about the visual elements in .NET MAUI" Text="2. Anatomy of an app" />
                                <TextCell Detail="Learn about the .NET MAUI controls that display text." Text="3. Text" />
                                <TextCell Detail="Learn how to size .NET MAUI controls on screen." Text="4. Dealing with sizes" />
                                <TextCell Detail="Learn more about creating your UI in XAML." Text="5. XAML vs code" />
                            </TableSection>
                        </TableRoot>
                    </TableView>
                    <app:SourceCodeExpander XamlCode="{x:Binding TextCellXamlCode}" />
                </VerticalStackLayout>
            </Frame>

            <!--  Image cell  -->
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Image cell" />
                    <Label Text="{x:StaticResource ControlInfo3}" />
                    <Label Text="The following example shows using an ImageCell to define the appearance of items in a TableView:" />
                    <TableView Intent="Menu">
                        <TableRoot>
                            <TableSection Title="Learn how to use your XBox">
                                <ImageCell
                                    Detail="Learn about your XBox and its capabilities."
                                    ImageSource="xbox.png"
                                    Text="1. Introduction" />
                                <ImageCell
                                    Detail="Learn how to turn on your XBox."
                                    ImageSource="xbox.png"
                                    Text="2. Turn it on" />
                                <ImageCell
                                    Detail="Learn how to connect your wireless controller."
                                    ImageSource="xbox.png"
                                    Text="3. Connect your controller" />
                                <ImageCell
                                    Detail="Learn how to launch a game."
                                    ImageSource="xbox.png"
                                    Text="4. Launch a game" />
                            </TableSection>
                        </TableRoot>
                    </TableView>
                    <app:SourceCodeExpander XamlCode="{x:Binding ImageCellXamlCode}" />
                </VerticalStackLayout>
            </Frame>

            <!--  Switch cell  -->
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Switch cell" />
                    <CollectionView
                        Footer="{x:StaticResource PropertiesListFooter3}"
                        Header="{x:StaticResource PropertiesListHeader4}"
                        ItemsSource="{x:StaticResource PropertyItemsSource4}"
                        Style="{x:StaticResource PropertiesListStyle}" />
                    <Label Text="The following example shows using a SwitchCell to define the appearance of items in a TableView:" />
                    <TableView Intent="Settings">
                        <TableRoot>
                            <TableSection>
                                <SwitchCell On="False" Text="Airplane Mode" />
                                <SwitchCell On="True" Text="Notifications" />
                            </TableSection>
                        </TableRoot>
                    </TableView>
                    <app:SourceCodeExpander XamlCode="{x:Binding SwitchCellXamlCode}" />
                </VerticalStackLayout>
            </Frame>

            <!--  Entry cell  -->
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Entry cell" />
                    <CollectionView
                        Footer="{x:StaticResource Proper}"
                        Header="{x:StaticResource PropertiesListHeader5}"
                        ItemsSource="{x:StaticResource PropertyItemsSource5}"
                        Style="{x:StaticResource Key=PropertiesListStyle}" />
                    <Label Text="The following example shows using an EntryCell to define the appearance of items in a TableView:" />
                    <TableView Intent="Settings">
                        <TableRoot>
                            <TableSection>
                                <EntryCell Label="Login" Placeholder="username" />
                                <EntryCell Label="Password" Placeholder="password" />
                            </TableSection>
                        </TableRoot>
                    </TableView>
                    <app:SourceCodeExpander XamlCode="{x:Binding EntryCellXamlCode}" />
                </VerticalStackLayout>
            </Frame>

            <!--  View cell  -->
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="View cell" />
                    <Label Text="{x:StaticResource ControlInfo4}" />
                    <Label Text="The following example shows using a ViewCell to define the appearance of an item in a TableView:" />
                    <TableView Intent="Settings">
                        <TableRoot>
                            <TableSection Title="Silent">
                                <ViewCell>
                                    <Grid ColumnDefinitions="0.5*,0.5*" RowDefinitions="Auto,Auto">
                                        <Label Margin="10,10,0,0" Text="Vibrate" />
                                        <Switch Grid.Column="1" HorizontalOptions="End" />
                                        <Slider
                                            Grid.Row="1"
                                            Grid.ColumnSpan="2"
                                            Margin="10"
                                            Maximum="10"
                                            Minimum="0"
                                            Value="3" />
                                    </Grid>
                                </ViewCell>
                            </TableSection>
                        </TableRoot>
                    </TableView>
                    <app:SourceCodeExpander XamlCode="{x:Binding ViewCellXamlCode}" />
                </VerticalStackLayout>
            </Frame>

            <!--  Right-to-left layout  -->
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Right-to-left layout" />
                    <Label Text="{x:StaticResource ControlInfo5}" />
                    <app:SourceCodeExpander XamlCode="{x:Binding RightToLeftLayoutXamlCode}" />
                    <Label Text="The default FlowDirection for an element with a parent is MatchParent. Therefore, the TableView inherits the FlowDirection property value from the ContentPage." />
                </VerticalStackLayout>
            </Frame>
        </VerticalStackLayout>
    </ScrollView>
</app:BasePage>