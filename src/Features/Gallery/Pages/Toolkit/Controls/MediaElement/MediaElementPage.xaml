<?xml version="1.0" encoding="utf-8" ?>
<app:BasePage
    x:Class="MAUIsland.MediaElementPage"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:app="clr-namespace:MAUIsland"
    xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
    Title="Media Element"
    Padding="10"
    x:DataType="app:MediaElementPageViewModel"
    BackgroundColor="Transparent"
    Loaded="ContentPage_Loaded"
    Unloaded="ContentPage_Unloaded">

    <app:BasePage.ToolbarItems>
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.GitHubUrl}"
            IconImageSource="githublogo.png"
            Text="Source code" />
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.DocumentUrl}"
            IconImageSource="microsoft.png"
            Text="Original Document" />
    </app:BasePage.ToolbarItems>

    <app:BasePage.Resources>
        <x:Array x:Key="SupportedFormats" Type="{x:Type app:SupportedFormatsTable}">
            <app:SupportedFormatsTable
                Link="ExoPlayer Supported Formats"
                Notes=""
                Platform="Android" />
            <app:SupportedFormatsTable
                Link="iOS/macOS Supported Formats"
                Notes="No official documentation on this exists"
                Platform="iOS/macOS" />
            <app:SupportedFormatsTable
                Link="Windows Supported Formats"
                Notes="On Windows the supported formats are very much dependent on what codecs are installed on the user's machine"
                Platform="Windows" />
            <app:SupportedFormatsTable
                Link="Tizen Supported Formats"
                Notes=""
                Platform="Tizen" />
        </x:Array>

        <x:Array x:Key="PlatformImplementations" Type="{x:Type app:SupportedFormatsTable}">
            <app:SupportedFormatsTable
                Link="ExoPlayer, big thank you to the ExoPlayerXamarin maintainers!"
                Notes=""
                Platform="Android" />
            <app:SupportedFormatsTable
                Link="AVPlayer"
                Notes=""
                Platform="iOS/macOS" />
            <app:SupportedFormatsTable
                Link="MediaPlayer"
                Notes=""
                Platform="Windows" />
        </x:Array>

        <x:Array x:Key="PropertyItemsSource" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">Aspect</strong> determines the scaling mode for the (visual) media that is currently loaded. This is a bindable property. Default value is <strong style="color:blue">Aspect.AspectFit</strong>.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">CurrentState</strong> is <strong style="color:blue">MediaElementState</strong> property which indicates the current status of the control. This is a read-only, bindable property. Default value is <strong style="color:blue">MediaElementState.None</strong>.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Duration</strong> is <strong style="color:blue">TimeSpan</strong> property which indicates the duration of the currently opened media. This is a read-only, bindable property. Default value is <strong style="color:blue">TimeSpan.Zero</strong>.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Position</strong> is <strong style="color:blue">TimeSpan</strong> property which indicates the duration of the currently opened media. This is a read-only, bindable property. Default value is <strong style="color:blue">TimeSpan.Zero</strong>.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">ShouldAutoPlay</strong> type <strong style="color:blue">boolean</strong>, this property indicates whether media playback will begin automatically when the Source property is set. This is a bindable property. Default value is <strong style="color:blue">false</strong>.    ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">ShouldLoopPlayback</strong> type <strong style="color:blue">boolean</strong>, this property describes whether the currently loaded media source should resume playback from the start after reaching its end. This is a bindable property. Default value is <strong style="color:blue">false</strong>.    ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">ShouldKeepScreenOn</strong> type <strong style="color:blue">boolean</strong>, this property determines whether the device screen should stay on during media playback. This is a bindable property. Default value is <strong style="color:blue">false</strong>.    ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">ShouldMute</strong> type <strong style="color:blue">boolean</strong>, this property determines whether the audio is currently muted. This is a bindable property. Default value is <strong style="color:blue">false</strong>.    ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">ShouldShowPlaybackControls</strong> type <strong style="color:blue">boolean</strong>, this property determines whether the platforms playback controls are displayed. This is a bindable property. Note that on iOS and Windows the controls are only shown for a brief period after interacting with the screen. There is no way of keeping the controls visible at all times. Default value is <strong style="color:blue">true</strong>.    ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Source</strong> is <strong style="color:blue">MediaSource?</strong> type property, this property is the source of the media loaded into the control. Default value is <strong style="color:blue">null</strong>.    ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Speed</strong> is a <strong style="color:blue">double</strong> property, it determines the playback speed of the media. This is a bindable property. Default value is <strong style="color:blue">1</strong>.    ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">MediaHeight</strong> and <strong style="color:blue">MediaWidth</strong> is a <strong style="color:blue">int</strong> type property, it is the height and the width of the loaded media in pixels. This is a read-only, bindable property. Default value is <strong style="color:blue">0</strong>.    ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Volume</strong> is a <strong style="color:blue">double</strong> type property, it determines the media's volume, which is represented on a linear scale between 0 and 1. This is a bindable property. Default value is <strong style="color:blue">1</strong>.    ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="EventItemsSource" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">MediaOpened</strong> Occurs when the media stream has been validated and opened.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">MediaEnded</strong> Occurs when the <strong style="color:blue">MediaElement</strong> finishes playing its media.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">MediaFailed</strong> Occurs when there's an error associated with the media source.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">PositionChanged</strong> Occurs when the <strong style="color:blue">Position</strong> property value has changed.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">SeekCompleted</strong> Occurs when the seek point of a requested seek operation is ready for playback.   ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="MethodItemsSource" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">Play</strong> Starts playing the loaded media.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Pause</strong> Pauses playback of the current media.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Stop</strong> Stops playback and resets the position of the current media.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">SeekTo</strong> Takes a <strong style="color:blue">TimeSpan</strong> value to set the <strong style="color:blue">Position</strong> property to.   ]]>
            </x:String>
        </x:Array>

        <x:String x:Key="MediaElementHeader">
            Media that's supported by the underlying platform can be played from the following sources:
        </x:String>
        <x:Array x:Key="MediaElement" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The web, using a URI (HTTP or HTTPS).   ]]>
            </x:String>
            <x:String>
                <![CDATA[   A resource embedded in the platform application, using the <strong style="color:blue">embed://</strong> URI scheme. ]]>
            </x:String>
            <x:String>
                <![CDATA[   Files that come from the app's local filesystem, using the <strong style="color:blue">filesystem://</strong> URI scheme.    ]]>
            </x:String>
        </x:Array>
        <x:String x:Key="MediaElementFooter">
            MediaElement can use the platform playback controls, which are referred to as transport controls. However, they are disabled by default and can be replaced with your own transport controls. The following screenshots show MediaElement playing a video with the platform transport controls:
        </x:String>

        <x:Array x:Key="PlatformImplementation" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   Platform   ]]>
            </x:String>
            <x:String>
                <![CDATA[   PlatformImplementations   ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="SupportedFormat" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   Platform   ]]>
            </x:String>
            <x:String>
                <![CDATA[   Link   ]]>
            </x:String>
            <x:String>
                <![CDATA[   Notes  ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="iOSBypassing" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   To bypass the Hardware Silent Switch on iOS, add the following lines of code to <strong style="color:blue">MauiProgram.cs</strong>. This ensures that MediaElement's playback audio will always be audible to the user regardless of their device's Hardware Silent Switch.   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="RemoteMedia" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   A <strong style="color:blue">MediaElement</strong> can play remote media files using the HTTP and HTTPS URI schemes. This is accomplished by setting the <strong style="color:blue">Source</strong> property to the URI of the media file:   ]]>
            </x:String>
        </x:Array>

        <x:String x:Key="LocalMediaHeader">
            Local media can be played from the following sources:
        </x:String>
        <x:Array x:Key="LocalMedia" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   A resource embedded in the platform application, using the <strong style="color:blue">embed://</strong> URI scheme.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   Files that come from the app's local filesystem, using the <strong style="color:blue">filesystem://</strong> URI scheme. ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="AppPackageLocalMedia" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   A MediaElement can play media files that are embedded in the app package, using the <strong style="color:blue">embed://</strong> URI scheme. Media files are embedded in the app package by placing them in the platform project.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   To enable a media file for playback from the local resources add the file to the <strong style="color:blue">Resources/Raw</strong> folder of you .NET MAUI project. When a file is added in the root, the URI would be <strong style="color:blue">embed://MyFile.mp4</strong>. ]]>
            </x:String>
            <x:String>
                <![CDATA[   You can also place files in sub folders. If <strong style="color:blue">MyFile.mp4</strong> would be in <strong style="color:blue">Resources/Raw/MyVideos</strong> then the URI to use it with <strong style="color:blue">MediaElement</strong> would be <strong style="color:blue">embed://MyVideos/MyFile.mp4</strong>. ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="MediaSourceStaticMethodsHeader" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   A <strong style="color:blue">MediaElement</strong> can play media by setting its <strong style="color:blue">Source</strong> property to a remote or local media file. The <strong style="color:blue">Source</strong> property is of type <strong style="color:blue">MediaSource</strong>, and this class defines three static methods:   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="MediaSourceStaticMethods" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">FromFile</strong>, returns a <strong style="color:blue">FileMediaSource</strong> instance from a <strong style="color:blue">string</strong> argument. This method creates a <strong style="color:blue">FileMediaSource</strong> that reads media from a local file   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">FromUri</strong>, returns a <strong style="color:blue">UriMediaSource</strong> instance from a <strong style="color:blue">Uri</strong> argument. This method creates an <strong style="color:blue">UriMediaSource</strong> that downloads and reads media from a specified URI   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">FromResource</strong>, returns a <strong style="color:blue">ResourceMediaSource</strong> instance from a <strong style="color:blue">string</strong> argument. This method creates a <strong style="color:blue">ResourceMediaSource</strong> that reads media from an embedded resource  ]]>
            </x:String>
        </x:Array>
        <x:String x:Key="MediaSourceStaticMethodsFooter">
            In addition, the MediaSource class also has implicit operators that return MediaSource instances from string and Uri arguments.
        </x:String>

        <x:String x:Key="MediaSourceTypesHeader">
            The MediaSource class also has these derived classes:
        </x:String>
        <x:Array x:Key="MediaSourceTypes" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">FileMediaSource</strong>, Used for media located in the app package. This class has a <strong style="color:blue">Path</strong> property that can be set to a <strong style="color:blue">string</strong>. In addition, this class has implicit operators to convert a <strong style="color:blue">string</strong> to a <strong style="color:blue">FileMediaSource</strong> object, and a <strong style="color:blue">FileMediaSource</strong> object to a <strong style="color:blue">string</strong>.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">UriMediaSource</strong>, Used for media located at a <strong style="color:blue">Uri</strong>. This can be a file or HTTP URL. This class has a <strong style="color:blue">Uri</strong> property that can be set to a <strong style="color:blue">Uri</strong>.  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">ResourceMediaSource</strong>, Used for media located in an embedded resource. This class has a <strong style="color:blue">Path</strong> property that can be set to a <strong style="color:blue">string</strong>. ]]>
            </x:String>
        </x:Array>
        <x:String x:Key="MediaSourceTypesFooter">
            Both of these methods are the same in result they both return a Source but just in different ways one Source is created by the class and one Source is created by the static method but they are the same Source if they have the same parameter
        </x:String>

        <x:Array x:Key="AspectRatio" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">AspectFit</strong> indicates that the video will be letterboxed, if required, to fit into the display area, while preserving the aspect ratio.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">AspectFill</strong> indicates that the video will be clipped so that it fills the display area, while preserving the aspect ratio.  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Fill</strong> indicates that the video will be stretched to fill the display area. ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="MediaElementStateHeader" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The <strong style="color:blue">MediaElement</strong> class defines a read-only bindable property named <strong style="color:blue">CurrentState</strong>, of type <strong style="color:blue">MediaElementState</strong>. The <strong style="color:blue">MediaElementState</strong> enumeration defines the following members:   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="MediaElementState" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">None</strong> indicates that the <strong style="color:blue">MediaElement</strong> contains no media.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Opening</strong> indicates that the <strong style="color:blue">MediaElement</strong> is validating and attempting to load the specified source.  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Buffering</strong> indicates that the <strong style="color:blue">MediaElement</strong> is loading the media for playback. Its <strong style="color:blue">Position</strong> property does not advance during this state. If the <strong style="color:blue">MediaElement</strong> was playing video, it continues to display the last displayed frame.  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Playing</strong> indicates that the <strong style="color:blue">MediaElement</strong> is playing the media source.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Paused</strong> indicates that the <strong style="color:blue">MediaElement</strong> does not advance its <strong style="color:blue">Position</strong> property. If the <strong style="color:blue">MediaElement</strong> was playing video, it continues to display the current frame.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Stopped</strong> indicates that the <strong style="color:blue">MediaElement</strong> contains media but it is not being played or paused. Its Position property is reset to 0 and does not advance.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Failed</strong> indicates that the <strong style="color:blue">MediaElement</strong> failed to load or play the media. This can occur while trying to load a new media item, when attempting to play the media item or when the media playback is interrupted due to a failure. Use the <strong style="color:blue">MediaFailed</strong> event to retrieve additional details.   ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="MediaElementCleanUpResources" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   To prevent memory leaks you will have to free the resources of <strong style="color:blue">MediaElement</strong>. This can be done by disconnecting the handler. Where you need to do this is dependant on where and how you use <strong style="color:blue">MediaElement</strong> in your app, but typically if you have a <strong style="color:blue">MediaElement</strong> on a single page and are not playing media in the background, you want to free the resources when the user navigates away from the page.    ]]>
            </x:String>
            <x:String>
                <![CDATA[   Below you can find a snippet of sample code which shows how to do this. First, make sure to hook up the <strong style="color:blue">Unloaded</strong> event on your page. Adding this line    ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="MediaElementCleanUpResourcesExplanation" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[    <strong style="color:blue">ContentPage_Unloaded</strong>, is an event handler for the <strong style="color:blue">Unloaded</strong> event of the <strong style="color:blue">BasePage</strong>. This event is fired when the page is removed from the visual tree. In this method, the <strong style="color:blue">DisconnectHandler</strong> method is called on the <strong style="color:blue">Handler</strong> property of each <strong style="color:blue">MediaElement</strong>. <strong style="color:blue">ContentPage_Unloaded</strong> method is triggered when the page is removed from the visual tree, which means it’s not just invisible, but unloaded from memory.   ]]>
            </x:String>
            <x:String>
                <![CDATA[    <strong style="color:blue">OnDisappearing</strong>, is an override of the <strong style="color:blue">OnDisappearing</strong> method in the <strong style="color:blue">Page</strong> class. This method is called just before a page becomes invisible. In this method, all event handlers are disconnected and the <strong style="color:blue">Source</strong> property of the <strong style="color:blue">MediaElement</strong> is set to null. <strong style="color:blue">OnDisappearing</strong> method is triggered when the page is about to become invisible, but not necessarily unloaded. This could happen, for example, when navigating to another page.   ]]>
            </x:String>
        </x:Array>

        <DataTemplate x:Key="SupportedFormatsTableHeader">
            <Frame
                Padding="5"
                BackgroundColor="White"
                CornerRadius="0">
                <Grid Grid.ColumnSpan="3" ColumnDefinitions="0.2*, 0.3*, 0.5*">
                    <Label Grid.Column="0" Text="{x:Binding Source={x:StaticResource SupportedFormat}, Path=[0]}" />
                    <Label Grid.Column="1" Text="{x:Binding Source={x:StaticResource SupportedFormat}, Path=[1]}" />
                    <Label Grid.Column="2" Text="{x:Binding Source={x:StaticResource SupportedFormat}, Path=[2]}" />
                </Grid>
            </Frame>
        </DataTemplate>

        <DataTemplate x:Key="SupportedFormatsTableGrid" x:DataType="app:SupportedFormatsTable">
            <Frame
                Margin="0"
                Padding="5"
                CornerRadius="0">
                <Grid
                    Grid.ColumnSpan="3"
                    Margin="0"
                    ColumnDefinitions="0.2*, 0.3*, 0.5*">
                    <Label Grid.Column="0" Text="{x:Binding Platform}" />
                    <Label Grid.Column="1" Text="{x:Binding Link}" />
                    <Label Grid.Column="2" Text="{x:Binding Notes}" />
                </Grid>
            </Frame>
        </DataTemplate>

        <DataTemplate x:Key="PlatformImplementationsTableHeader">
            <Frame Padding="5" CornerRadius="0">
                <Grid Grid.ColumnSpan="3" ColumnDefinitions="0.2*, 0.3*, 0.5*">
                    <Label Grid.Column="0" Text="{x:Binding Source={x:StaticResource PlatformImplementation}, Path=[0]}" />
                    <Label Grid.Column="1" Text="{x:Binding Source={x:StaticResource PlatformImplementation}, Path=[1]}" />
                </Grid>
            </Frame>
        </DataTemplate>

        <DataTemplate x:Key="PlatformImplementationsTableGrid" x:DataType="app:SupportedFormatsTable">
            <Frame
                Margin="0"
                Padding="5"
                CornerRadius="0">
                <Grid
                    Grid.ColumnSpan="3"
                    Margin="0"
                    ColumnDefinitions="0.3*, 0.7*">
                    <Label Grid.Column="0" Text="{x:Binding Platform}" />
                    <Label Grid.Column="1" Text="{x:Binding Link}" />
                </Grid>
            </Frame>
        </DataTemplate>
    </app:BasePage.Resources>

    <ScrollView>
        <VerticalStackLayout Spacing="20">
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <Label Text="{x:Binding ControlInformation.ControlDetail}" />
            </Frame>
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <CollectionView
                    Footer="{x:StaticResource MediaElementFooter}"
                    Header="{x:StaticResource MediaElementHeader}"
                    ItemsSource="{x:StaticResource MediaElement}"
                    Style="{x:StaticResource PropertiesListStyle}" />
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Supported Formats" />
                    <CollectionView
                        Header="{x:Binding .}"
                        HeaderTemplate="{x:StaticResource SupportedFormatsTableHeader}"
                        ItemTemplate="{x:StaticResource SupportedFormatsTableGrid}"
                        ItemsSource="{x:StaticResource SupportedFormats}" />
                    <Label Text="The MediaElement uses the following platform implementations." />
                    <CollectionView
                        Header="{x:Binding .}"
                        HeaderTemplate="{x:StaticResource PlatformImplementationsTableHeader}"
                        ItemTemplate="{x:StaticResource PlatformImplementationsTableGrid}"
                        ItemsSource="{x:StaticResource PlatformImplementations}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Properties" />
                    <CollectionView ItemsSource="{x:StaticResource PropertyItemsSource}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Events" />
                    <CollectionView ItemsSource="{x:StaticResource EventItemsSource}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Methods" />
                    <CollectionView ItemsSource="{x:StaticResource MethodItemsSource}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Setup Toolkit" />
                    <VerticalStackLayout>
                        <Label Text="{x:Binding SetupDescription}" />
                        <Label Text="{x:Binding XamlNamespace}" TextColor="Blue" />
                    </VerticalStackLayout>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Text="Therefore the following:" />
                    <app:SourceCodeExpander Code="{x:Binding FullNamepaceExampleBefore}" CodeType="Xaml" />
                    <Label Text="Would be modified to include the xmlns as follows:" />
                    <app:SourceCodeExpander Code="{x:Binding FullNamepaceExampleAfter}" CodeType="Xaml" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Bypassing the iOS Silent Switch" />
                    <CollectionView ItemsSource="{x:StaticResource iOSBypassing}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <app:SourceCodeExpander Code="{x:Binding IOSBypassingSetup}" CodeType="Xaml" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Play remote media" />
                    <CollectionView ItemsSource="{x:StaticResource RemoteMedia}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <toolkit:MediaElement
                    x:Name="SimpleMediaElement"
                    MinimumHeightRequest="200"
                    ShouldShowPlaybackControls="True"
                    Source="https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4" />
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Text="Your code should like this" />
                    <app:SourceCodeExpander Code="{x:Binding XamlSimpleRemoteMediaElement}" CodeType="Xaml" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Play local media" />
                    <CollectionView
                        Header="{x:StaticResource LocalMediaHeader}"
                        ItemsSource="{x:StaticResource LocalMedia}"
                        Style="{x:StaticResource PropertiesListStyle}" />
                    <Label Text="Play media embedded in the app package" />
                    <CollectionView ItemsSource="{x:StaticResource AppPackageLocalMedia}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Text="An example of how to use this syntax in XAML can be seen below." />
                    <app:SourceCodeExpander Code="{x:Binding XamlSimpleLocalMediaElement}" CodeType="Xaml" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="MediaSource types static methods" />
                    <CollectionView
                        Footer="{x:StaticResource MediaSourceStaticMethodsFooter}"
                        Header="{x:StaticResource MediaSourceStaticMethodsHeader}"
                        ItemsSource="{x:StaticResource MediaSourceStaticMethods}"
                        Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <app:SourceCodeExpander Code="{x:Binding MediaSourceStaticMethodsExample}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="MediaSource derived classes" />
                    <CollectionView
                        Footer="{x:StaticResource MediaSourceTypesFooter}"
                        Header="{x:StaticResource MediaSourceTypesHeader}"
                        ItemsSource="{x:StaticResource MediaSourceTypes}"
                        Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <app:SourceCodeExpander Code="{x:Binding MediaSourceExample}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Change video aspect ratio" />
                    <CollectionView ItemsSource="{x:StaticResource AspectRatio}" Style="{x:StaticResource PropertiesListStyle}" />
                    <app:SourceCodeExpander Code="{x:Binding AspectRatioExample}" CodeType="Xaml" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Determine MediaElement status" />
                    <CollectionView
                        Header="{x:StaticResource MediaElementStateHeader}"
                        ItemsSource="{x:StaticResource MediaElementState}"
                        Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Implement custom transport controls" />
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <toolkit:MediaElement
                    x:Name="MediaElement"
                    MediaEnded="OnMediaEnded"
                    MediaFailed="OnMediaFailed"
                    MediaOpened="OnMediaOpened"
                    PositionChanged="OnPositionChanged"
                    SeekCompleted="OnSeekCompleted"
                    ShouldAutoPlay="False"
                    Source="https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"
                    StateChanged="OnStateChanged"
                    Volume="{x:Binding Volume,
                                       Mode=TwoWay}" />
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <HorizontalStackLayout
                    BindingContext="{x:Reference MediaElement}"
                    HorizontalOptions="CenterAndExpand"
                    Spacing="10">
                    <Button
                        Grid.Column="0"
                        Clicked="OnPlayClicked"
                        Text="Play" />
                    <Button
                        Grid.Column="1"
                        Clicked="OnPauseClicked"
                        Text="Pause" />
                    <Button
                        Grid.Column="2"
                        Clicked="OnStopClicked"
                        Text="Stop" />
                    <Button
                        Grid.Column="3"
                        Clicked="OnMuteClicked"
                        Text="Mute">
                        <Button.Triggers>
                            <DataTrigger
                                Binding="{x:Binding ShouldMute,
                                                    Source={x:Reference MediaElement}}"
                                TargetType="Button"
                                Value="True">
                                <Setter Property="Text" Value="Unmute" />
                            </DataTrigger>
                            <DataTrigger
                                Binding="{x:Binding ShouldMute,
                                                    Source={x:Reference MediaElement}}"
                                TargetType="Button"
                                Value="False">
                                <Setter Property="Text" Value="Mute" />
                            </DataTrigger>
                        </Button.Triggers>
                    </Button>
                    <Button Clicked="OnSpeedMinusClicked" Text="&gt;" />
                    <Button Clicked="OnSpeedPlusClicked" Text="&gt;&gt;&gt;" />
                    <Button Clicked="OnVolumeMinusClicked" Text="-" />
                    <Button Clicked="OnVolumePlusClicked" Text="+" />
                </HorizontalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Text="This is the xaml code" />
                    <app:SourceCodeExpander Code="{x:Binding XamlMediaElement}" CodeType="Xaml" />
                    <Label Text="This is the code behind" />
                    <app:SourceCodeExpander Code="{x:Binding CSharpMediaElement}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Implement a custom volumea and video position control" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <Grid
                    ColumnDefinitions="0.5*,0.5*"
                    ColumnSpacing="10"
                    HorizontalOptions="FillAndExpand">
                    <VerticalStackLayout Grid.Column="0" Spacing="10">
                        <Label Text="Video Volume" />
                        <Slider
                            x:Name="VolumeSlider"
                            IsEnabled="True"
                            Maximum="1.0"
                            Minimum="0.0"
                            MinimumTrackColor="Gray"
                            WidthRequest="200"
                            Value="{x:Binding Volume,
                                              Mode=TwoWay}" />
                        <Label Text="This is the xaml code" />
                        <app:SourceCodeExpander Code="{x:Binding XamlVolumeControl}" CodeType="Xaml" />
                        <Label Text="This is the ViewModel code" />
                        <app:SourceCodeExpander Code="{x:Binding CSharpVolumeControl}" CodeType="CSharp" />
                    </VerticalStackLayout>
                    <VerticalStackLayout Grid.Column="2" Spacing="10">
                        <Label Text="Video Position" />
                        <Slider
                            x:Name="PositionSlider"
                            DragCompleted="Slider_DragCompleted"
                            DragStarted="Slider_DragStarted"
                            IsEnabled="True"
                            MinimumTrackColor="Gray"
                            WidthRequest="200" />
                        <Label Text="This is the xaml code" />
                        <app:SourceCodeExpander Code="{x:Binding XamlPositionControl}" CodeType="Xaml" />
                        <Label Text="This is the code behind" />
                        <app:SourceCodeExpander Code="{x:Binding CSharpPositionControl}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </Grid>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Clean up MediaElement resources" />
                    <CollectionView ItemsSource="{x:StaticResource MediaElementCleanUpResources}" Style="{x:StaticResource PropertiesListStyle}" />
                    <Label Text="{x:Binding XamlCleanUpProperty}" TextColor="Blue" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Text="This is the xaml code" />
                    <app:SourceCodeExpander Code="{x:Binding XamlCleanUpMediaElementResourcesRemovedVisualTree}" CodeType="Xaml" />
                    <Label Text="This is the code behind" />
                    <app:SourceCodeExpander Code="{x:Binding CSharpCleanUpMediaElementResourcesRemovedVisualTree}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Text="You can clean up resource using OnDisappearing" />
                    <app:SourceCodeExpander Code="{x:Binding CleanUpMediaElementResourcesPageInvisible}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <CollectionView ItemsSource="{x:StaticResource MediaElementCleanUpResourcesExplanation}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>


            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Download And Delete Media File" />
                    <toolkit:MediaElement
                        x:Name="MediaElementDownloadSample"
                        HeightRequest="300"
                        ShouldAutoPlay="True"
                        ShouldShowPlaybackControls="True"
                        WidthRequest="400" />
                    <ActivityIndicator
                        x:Name="DownloadIndicator"
                        HeightRequest="100"
                        WidthRequest="100" />
                    <ProgressBar x:Name="DownloadProgressBar" />

                    <Label
                        x:Name="ResultLabel"
                        FontSize="18"
                        HorizontalOptions="Center"
                        SemanticProperties.Description="Welcome to dot net Multi platform App U I"
                        SemanticProperties.HeadingLevel="Level2"
                        Text="Start the download boiz" />

                    <Label
                        x:Name="CheckFileLabel"
                        FontSize="18"
                        HorizontalOptions="Center"
                        Text="Common check the file" />

                    <Button
                        x:Name="DownloadButton"
                        Clicked="DownloadButton_Clicked"
                        HorizontalOptions="Center"
                        SemanticProperties.Hint="Counts the number of times you click"
                        Text="Download" />

                    <Button
                        x:Name="DeleteLocalVideoButton"
                        BackgroundColor="Red"
                        Clicked="DeleteLocalVideoButton_Clicked"
                        Text="Delete" />

                    <Button Clicked="CheckDownload_Clicked" Text="Check download" />
                </VerticalStackLayout>
            </Frame>
        </VerticalStackLayout>
    </ScrollView>
</app:BasePage>