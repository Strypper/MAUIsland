<?xml version="1.0" encoding="utf-8" ?>
<app:BasePage
    x:Class="MAUIsland.MediaElementPage"
    x:DataType="app:MediaElementPageViewModel"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:app="clr-namespace:MAUIsland"
    xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
    Title="Media Element"
    BackgroundColor="Transparent"
    Loaded="ContentPage_Loaded"
    Padding="10">
    
    <app:BasePage.ToolbarItems>
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.GitHubUrl}"
            IconImageSource="github.png"
            Text="Source code" />
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.DocumentUrl}"
            IconImageSource="microsoft.png"
            Text="Original Document" />
    </app:BasePage.ToolbarItems>

    <app:BasePage.Resources>
        <x:Array x:Key="SupportedFormats" Type="{x:Type app:SupportedFormatsTable}">
            <app:SupportedFormatsTable Platform="Android" Link="ExoPlayer Supported Formats" Notes="" />
            <app:SupportedFormatsTable Platform="iOS/macOS" Link="iOS/macOS Supported Formats" Notes="No official documentation on this exists" />
            <app:SupportedFormatsTable Platform="Windows" Link="Windows Supported Formats" Notes="On Windows the supported formats are very much dependent on what codecs are installed on the user's machine" />
            <app:SupportedFormatsTable Platform="Tizen" Link="Tizen Supported Formats" Notes="" />
        </x:Array>

        <x:Array x:Key="PlatformImplementations" Type="{x:Type app:SupportedFormatsTable}">
            <app:SupportedFormatsTable Platform="Android" Link="ExoPlayer, big thank you to the ExoPlayerXamarin maintainers!" Notes="" />
            <app:SupportedFormatsTable Platform="iOS/macOS" Link="AVPlayer" Notes="" />
            <app:SupportedFormatsTable Platform="Windows" Link="MediaPlayer" Notes="" />
        </x:Array>

        <x:String x:Key="MediaElementHeader">
            Media that's supported by the underlying platform can be played from the following sources:
        </x:String>
        <x:Array x:Key="MediaElement" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The web, using a URI (HTTP or HTTPS).   ]]>
            </x:String>
            <x:String>
                <![CDATA[   A resource embedded in the platform application, using the <strong style="color:blue">embed://</strong> URI scheme. ]]>
            </x:String>
            <x:String>
                <![CDATA[   Files that come from the app's local filesystem, using the <strong style="color:blue">filesystem://</strong> URI scheme.    ]]>
            </x:String>
        </x:Array>
        <x:String x:Key="MediaElementFooter">
            MediaElement can use the platform playback controls, which are referred to as transport controls. However, they are disabled by default and can be replaced with your own transport controls. The following screenshots show MediaElement playing a video with the platform transport controls:
        </x:String>

        <x:Array x:Key="PlatformImplementation"  Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   Platform   ]]>
            </x:String>
            <x:String>
                <![CDATA[   PlatformImplementations   ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="SupportedFormat"  Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   Platform   ]]>
            </x:String>
            <x:String>
                <![CDATA[   Link   ]]>
            </x:String>
            <x:String>
                <![CDATA[   Notes  ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="iOSBypassing" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   To bypass the Hardware Silent Switch on iOS, add the following lines of code to <strong style="color:blue">MauiProgram.cs</strong>. This ensures that MediaElement's playback audio will always be audible to the user regardless of their device's Hardware Silent Switch.   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="RemoteMedia" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   A <strong style="color:blue">MediaElement</strong> can play remote media files using the HTTP and HTTPS URI schemes. This is accomplished by setting the <strong style="color:blue">Source</strong> property to the URI of the media file:   ]]>
            </x:String>
        </x:Array>

        <x:String x:Key="LocalMediaHeader">
            Local media can be played from the following sources:
        </x:String>
        <x:Array x:Key="LocalMedia" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   A resource embedded in the platform application, using the <strong style="color:blue">embed://</strong> URI scheme.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   Files that come from the app's local filesystem, using the <strong style="color:blue">filesystem://</strong> URI scheme. ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="AppPackageLocalMedia" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   A MediaElement can play media files that are embedded in the app package, using the <strong style="color:blue">embed://</strong> URI scheme. Media files are embedded in the app package by placing them in the platform project.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   To enable a media file for playback from the local resources add the file to the <strong style="color:blue">Resources/Raw</strong> folder of you .NET MAUI project. When a file is added in the root, the URI would be <strong style="color:blue">embed://MyFile.mp4</strong>. ]]>
            </x:String>
            <x:String>
            <![CDATA[   You can also place files in sub folders. If <strong style="color:blue">MyFile.mp4</strong> would be in <strong style="color:blue">Resources/Raw/MyVideos</strong> then the URI to use it with <strong style="color:blue">MediaElement</strong> would be <strong style="color:blue">embed://MyVideos/MyFile.mp4</strong>. ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="MediaSourceStaticMethodsHeader" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   A <strong style="color:blue">MediaElement</strong> can play media by setting its <strong style="color:blue">Source</strong> property to a remote or local media file. The <strong style="color:blue">Source</strong> property is of type <strong style="color:blue">MediaSource</strong>, and this class defines three static methods:   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="MediaSourceStaticMethods" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">FromFile</strong>, returns a <strong style="color:blue">FileMediaSource</strong> instance from a <strong style="color:blue">string</strong> argument. This method creates a <strong style="color:blue">FileMediaSource</strong> that reads media from a local file   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">FromUri</strong>, returns a <strong style="color:blue">UriMediaSource</strong> instance from a <strong style="color:blue">Uri</strong> argument. This method creates an <strong style="color:blue">UriMediaSource</strong> that downloads and reads media from a specified URI   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">FromResource</strong>, returns a <strong style="color:blue">ResourceMediaSource</strong> instance from a <strong style="color:blue">string</strong> argument. This method creates a <strong style="color:blue">ResourceMediaSource</strong> that reads media from an embedded resource  ]]>
            </x:String>
        </x:Array>
        <x:String x:Key="MediaSourceStaticMethodsFooter">
            In addition, the MediaSource class also has implicit operators that return MediaSource instances from string and Uri arguments.
        </x:String>

        <x:String x:Key="MediaSourceTypesHeader">
            The MediaSource class also has these derived classes:
        </x:String>
        <x:Array x:Key="MediaSourceTypes" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">FileMediaSource</strong>, Used for media located in the app package. This class has a <strong style="color:blue">Path</strong> property that can be set to a <strong style="color:blue">string</strong>. In addition, this class has implicit operators to convert a <strong style="color:blue">string</strong> to a <strong style="color:blue">FileMediaSource</strong> object, and a <strong style="color:blue">FileMediaSource</strong> object to a <strong style="color:blue">string</strong>.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">UriMediaSource</strong>, Used for media located at a <strong style="color:blue">Uri</strong>. This can be a file or HTTP URL. This class has a <strong style="color:blue">Uri</strong> property that can be set to a <strong style="color:blue">Uri</strong>.  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">ResourceMediaSource</strong>, Used for media located in an embedded resource. This class has a <strong style="color:blue">Path</strong> property that can be set to a <strong style="color:blue">string</strong>. ]]>
            </x:String>
        </x:Array>
        <x:String x:Key="MediaSourceTypesFooter">
            Both of these methods are the same in result they both return a Source but just in different ways one Source is created by the class and one Source is created by the static method but they are the same Source if they have the same parameter
        </x:String>

        <x:Array x:Key="AspectRatio" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">AspectFit</strong> indicates that the video will be letterboxed, if required, to fit into the display area, while preserving the aspect ratio.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">AspectFill</strong> indicates that the video will be clipped so that it fills the display area, while preserving the aspect ratio.  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Fill</strong> indicates that the video will be stretched to fill the display area. ]]>
            </x:String>
        </x:Array>

        <x:Array x:Key="MediaElementStateHeader" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The <strong style="color:blue">MediaElement</strong> class defines a read-only bindable property named <strong style="color:blue">CurrentState</strong>, of type <strong style="color:blue">MediaElementState</strong>. The <strong style="color:blue">MediaElementState</strong> enumeration defines the following members:   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="MediaElementState" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">None</strong> indicates that the <strong style="color:blue">MediaElement</strong> contains no media.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Opening</strong> indicates that the <strong style="color:blue">MediaElement</strong> is validating and attempting to load the specified source.  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Buffering</strong> indicates that the <strong style="color:blue">MediaElement</strong> is loading the media for playback. Its <strong style="color:blue">Position</strong> property does not advance during this state. If the <strong style="color:blue">MediaElement</strong> was playing video, it continues to display the last displayed frame.  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Playing</strong> indicates that the <strong style="color:blue">MediaElement</strong> is playing the media source.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Paused</strong> indicates that the <strong style="color:blue">MediaElement</strong> does not advance its <strong style="color:blue">Position</strong> property. If the <strong style="color:blue">MediaElement</strong> was playing video, it continues to display the current frame.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Stopped</strong> indicates that the <strong style="color:blue">MediaElement</strong> contains media but it is not being played or paused. Its Position property is reset to 0 and does not advance.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Failed</strong> indicates that the <strong style="color:blue">MediaElement</strong> failed to load or play the media. This can occur while trying to load a new media item, when attempting to play the media item or when the media playback is interrupted due to a failure. Use the <strong style="color:blue">MediaFailed</strong> event to retrieve additional details.   ]]>
            </x:String>
        </x:Array>
        
        <DataTemplate x:Key="SupportedFormatsTableHeader">
            <Frame CornerRadius="0"
                   Padding="5"
                   BackgroundColor="White">
                <Grid ColumnDefinitions="0.2*, 0.3*, 0.5*" 
                      Grid.ColumnSpan="3">
                    <Label Grid.Column="0" 
                           Text="{x:Binding Source={x:StaticResource SupportedFormat}, Path=[0]}" />
                    <Label Grid.Column="1" 
                           Text="{x:Binding Source={x:StaticResource SupportedFormat}, Path=[1]}" />
                    <Label Grid.Column="2" 
                           Text="{x:Binding Source={x:StaticResource SupportedFormat}, Path=[2]}" />
                </Grid>
            </Frame>
        </DataTemplate>

        <DataTemplate x:Key="SupportedFormatsTableGrid" 
                      x:DataType="app:SupportedFormatsTable">
            <Frame CornerRadius="0"
                   Padding="5"
                   Margin="0"
                   BackgroundColor="White">
                <Grid ColumnDefinitions="0.2*, 0.3*, 0.5*" 
                      Grid.ColumnSpan="3" 
                      Margin="0">
                    <Label Grid.Column="0" Text="{x:Binding Platform}"/>
                    <Label Grid.Column="1" Text="{x:Binding Link}"/>
                    <Label Grid.Column="2" Text="{x:Binding Notes}"/>
                </Grid>
            </Frame>
        </DataTemplate>

        <DataTemplate x:Key="PlatformImplementationsTableHeader">
            <Frame CornerRadius="0"
                   Padding="5"
                   BackgroundColor="White">
                <Grid ColumnDefinitions="0.2*, 0.3*, 0.5*" 
                      Grid.ColumnSpan="3">
                    <Label Grid.Column="0" 
                           Text="{x:Binding Source={x:StaticResource PlatformImplementation}, Path=[0]}" />
                    <Label Grid.Column="1" 
                           Text="{x:Binding Source={x:StaticResource PlatformImplementation}, Path=[1]}" />
                </Grid>
            </Frame>
        </DataTemplate>

        <DataTemplate x:Key="PlatformImplementationsTableGrid" 
                      x:DataType="app:SupportedFormatsTable">
            <Frame CornerRadius="0"
                   Padding="5"
                   Margin="0"
                   BackgroundColor="White">
                <Grid ColumnDefinitions="0.3*, 0.7*" 
                      Grid.ColumnSpan="3" 
                      Margin="0">
                    <Label Grid.Column="0" Text="{x:Binding Platform}"/>
                    <Label Grid.Column="1" Text="{x:Binding Link}"/>
                </Grid>
            </Frame>
        </DataTemplate>
    </app:BasePage.Resources>

    <ScrollView>
        <VerticalStackLayout Spacing="20">
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <Label Text="{x:Binding ControlInformation.ControlDetail}" />
            </Frame>
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <CollectionView Footer="{x:StaticResource MediaElementFooter}"
                                Header="{x:StaticResource MediaElementHeader}"
                                ItemsSource="{x:StaticResource MediaElement}"
                                Style="{x:StaticResource PropertiesListStyle}"/>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Supported Formats" />
                    <CollectionView Header="{x:Binding .}"
                                    HeaderTemplate="{x:StaticResource SupportedFormatsTableHeader}"
                                    ItemsSource="{x:StaticResource SupportedFormats}" 
                                    ItemTemplate="{x:StaticResource SupportedFormatsTableGrid}"/>
                    <Label Text="The MediaElement uses the following platform implementations." />
                    <CollectionView Header="{x:Binding .}"
                                    HeaderTemplate="{x:StaticResource PlatformImplementationsTableHeader}"
                                    ItemsSource="{x:StaticResource PlatformImplementations}"
                                    ItemTemplate="{x:StaticResource PlatformImplementationsTableGrid}">
                    </CollectionView>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Setup MediaElement" />
                    <VerticalStackLayout>
                        <Label Text="{x:Binding SetupDescription}"/>
                        <Label Text="{x:Binding XamlNamespace}" TextColor="Blue"/>
                    </VerticalStackLayout>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Text="Therefore the following:"/>
                    <app:SourceCodeExpander CodeType="Xaml" Code="{x:Binding FullNamepaceExampleBefore}" />
                    <Label Text="Would be modified to include the xmlns as follows:"/>
                    <app:SourceCodeExpander CodeType="Xaml" Code="{x:Binding FullNamepaceExampleAfter}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Bypassing the iOS Silent Switch" />
                    <CollectionView ItemsSource="{x:StaticResource iOSBypassing}" Style="{x:StaticResource PropertiesListStyle}"/>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <app:SourceCodeExpander CodeType="Xaml" Code="{x:Binding IOSBypassingSetup}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Play remote media" />
                    <CollectionView ItemsSource="{x:StaticResource RemoteMedia}" Style="{x:StaticResource PropertiesListStyle}"/>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <toolkit:MediaElement MinimumHeightRequest="200"
                                      ShouldShowPlaybackControls="True"
                                      Source="https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4" />
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Text="Your code should like this"/>
                    <app:SourceCodeExpander CodeType="Xaml" Code="{x:Binding XamlSimpleRemoteMediaElement}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Play local media" />
                    <CollectionView ItemsSource="{x:StaticResource LocalMedia}"
                                    Header="{x:StaticResource LocalMediaHeader}"
                                    Style="{x:StaticResource PropertiesListStyle}"/>
                    <Label Text="Play media embedded in the app package" />
                    <CollectionView ItemsSource="{x:StaticResource AppPackageLocalMedia}" 
                                    Style="{x:StaticResource PropertiesListStyle}"/>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Text="An example of how to use this syntax in XAML can be seen below." />
                    <app:SourceCodeExpander CodeType="Xaml" Code="{x:Binding XamlSimpleLocalMediaElement}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="MediaSource types static methods" />
                    <CollectionView Header="{x:StaticResource MediaSourceStaticMethodsHeader}"
                                    Footer="{x:StaticResource MediaSourceStaticMethodsFooter}"
                                    ItemsSource="{x:StaticResource MediaSourceStaticMethods}" 
                                    Style="{x:StaticResource PropertiesListStyle}"/>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <app:SourceCodeExpander CodeType="CSharp" Code="{x:Binding MediaSourceStaticMethodsExample}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="MediaSource derived classes" />
                    <CollectionView Header="{x:StaticResource MediaSourceTypesHeader}"
                                    Footer="{x:StaticResource MediaSourceTypesFooter}"
                                    ItemsSource="{x:StaticResource MediaSourceTypes}" 
                                    Style="{x:StaticResource PropertiesListStyle}"/>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <app:SourceCodeExpander CodeType="CSharp" Code="{x:Binding MediaSourceExample}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Change video aspect ratio" />
                    <CollectionView ItemsSource="{x:StaticResource AspectRatio}" 
                                    Style="{x:StaticResource PropertiesListStyle}"/>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Determine MediaElement status" />
                    <CollectionView Header="{x:StaticResource MediaElementStateHeader}"
                                    ItemsSource="{x:StaticResource MediaElementState}"
                                    Style="{x:StaticResource PropertiesListStyle}"/>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Implement custom transport controls" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <toolkit:MediaElement x:Name="MediaElement" 
                                      ShouldAutoPlay="False"
                                      Volume="{x:Binding Volume}"
                                      MediaEnded="OnMediaEnded"
                                      MediaFailed="OnMediaFailed"
                                      MediaOpened="OnMediaOpened"
                                      PositionChanged="OnPositionChanged"
                                      StateChanged="OnStateChanged"
                                      SeekCompleted="OnSeekCompleted"
                                      Source="https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"/>
            </Frame>
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <HorizontalStackLayout BindingContext="{x:Reference MediaElement}">
                    <Button Grid.Column="0" Text="Play" Clicked="OnPlayClicked" />
                    <Button Grid.Column="1" Text="Pause" Clicked="OnPauseClicked" />
                    <Button Grid.Column="2" Text="Stop" Clicked="OnStopClicked" />
                    <Button Grid.Column="3" Text="Mute" Clicked="OnMuteClicked">
                        <Button.Triggers>
                            <DataTrigger TargetType="Button"
                                         Binding="{Binding ShouldMute, Source={x:Reference MediaElement}}"
                                         Value="True">
                                <Setter Property="Text" Value="Unmute" />
                            </DataTrigger>
                            <DataTrigger TargetType="Button"
                                         Binding="{Binding ShouldMute, Source={x:Reference MediaElement}}"
                                         Value="False">
                                <Setter Property="Text" Value="Mute" />
                            </DataTrigger>
                        </Button.Triggers>
                    </Button>
                </HorizontalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Implement a custom volume control" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Slider Maximum="1.0"
                            Minimum="0.0"
                            Value="{Binding Volume}"
                            WidthRequest="100" />       
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Clean up MediaElement resources" />
                </VerticalStackLayout>
            </Frame>
            

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <toolkit:MediaElement
                        x:Name="mediaElementDownloadSample"
                        HeightRequest="300"
                        ShouldAutoPlay="True"
                        ShouldShowPlaybackControls="True"
                        WidthRequest="400" />
                    <ActivityIndicator
                        x:Name="DownloadIndicator"
                        HeightRequest="100"
                        WidthRequest="100" />
                    <ProgressBar x:Name="DownloadProgressBar" />

                    <Label
                        x:Name="ResultLabel"
                        FontSize="18"
                        HorizontalOptions="Center"
                        SemanticProperties.Description="Welcome to dot net Multi platform App U I"
                        SemanticProperties.HeadingLevel="Level2"
                        Text="Start the download boiz" />

                    <Label
                        x:Name="CheckFileLabel"
                        FontSize="18"
                        HorizontalOptions="Center"
                        Text="Common check the file" />

                    <Button
                        x:Name="DownloadButton"
                        Clicked="DownloadButton_Clicked"
                        HorizontalOptions="Center"
                        SemanticProperties.Hint="Counts the number of times you click"
                        Text="Download" />

                    <Button
                        x:Name="DeleteLocalVideoButton"
                        BackgroundColor="Red"
                        Clicked="DeleteLocalVideoButton_Clicked"
                        Text="Delete" />

                    <Button Clicked="CheckDownload_Clicked" Text="Check download" />
                </VerticalStackLayout>
            </Frame>
        </VerticalStackLayout>
    </ScrollView>
</app:BasePage>