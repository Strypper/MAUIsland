<?xml version="1.0" encoding="utf-8" ?>
<app:BasePage
    x:Class="MAUIsland.ObservablePropertyPage"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:app="clr-namespace:MAUIsland"
    xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
    Title="ObservableProperty"
    Padding="10"
    x:DataType="app:ObservablePropertyPageViewModel">

    <app:BasePage.ToolbarItems>
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.GitHubUrl}"
            IconImageSource="github.png"
            Text="Source code" />
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.DocumentUrl}"
            IconImageSource="microsoft.png"
            Text="Original Document" />
    </app:BasePage.ToolbarItems>

    <app:BasePage.Resources>

        <x:String x:Key="PropertiesListFooter">
            It will also do so with an optimized implementation, so the end result will be even faster.
        </x:String>

        <x:Array x:Key="ObservableProperty" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The <strong style="color:blue">ObservableProperty</strong> attribute can be used to annotate a field in a partial type    ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="OnPropertyChange" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The <strong style="color:blue">ObservableProperty</strong> will auto generate the method that can handle trigger base on the change of property ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">On[YourProperty]Changed</strong> (string oldValue, string newValue)  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">On[YourProperty]Changing</strong> (string oldValue, string newValue) ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">On[YourProperty]Changed</strong> (string value)  ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">On[YourProperty]Changing</strong> (string value) ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="NotifyPropertyChangedFor" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   Raise a notification for whenever YourProperty changes. You can do that by using the <strong style="color:blue">NotifyPropertyChangedFor</strong> attribute ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="NotifyCanExecuteChangedFor" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   Whenever the property changed, the execution state of the command should be invalidated and computed again. In other words, <strong style="color:blue">ICommand.CanExecuteChanged</strong> should be raised again. You can achieve this by using the <strong style="color:blue">NotifyCanExecuteChangedFor</strong> attribute  ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="NotifyDataErrorInfo" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   If the property is declared in a type that inherits from <strong style="color:blue">ObservableValidator</strong>, it is possible to annotate it with any validation attributes and then request the generated setter to trigger validation for that property. This can be achieved with the <strong style="color:blue">NotifyDataErrorInfo</strong> attribute ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="NotifyPropertyChangedRecipients" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   If the property is declared in a type that inherits from <strong style="color:blue">ObservableRecipient</strong>, it is possible to annotate it with <strong style="color:blue">NotifyPropertyChangedRecipients</strong> property to instruct the generator to insert logic to send a property changed notification for a property change. This will allow registered recipients to respond flexibly to changes.   ]]>
            </x:String>
        </x:Array>

        <DataTemplate x:Key="ControlInfoCollectionView" 
                      x:DataType="app:IGalleryCardInfo">
            <Border Padding="5" Margin="0,5,0,5">
                <Border.StrokeShape>
                    <RoundRectangle CornerRadius="5" />
                </Border.StrokeShape>
                <Grid ColumnDefinitions="0.2*, 0.2*, 0.6*" 
                      HeightRequest="40">
                    <Image Grid.Column="0"
                           Source="{x:Binding ControlIcon}"
                           VerticalOptions="Center"/>
                    <Label Grid.Column="1"
                           FontAttributes="Bold"
                           LineBreakMode="TailTruncation"
                           FontSize="14"
                           Text="{x:Binding ControlName}"
                           VerticalTextAlignment="Center"/>
                    <Label Grid.Column="2"
                           FontAttributes="Italic"
                           LineBreakMode="TailTruncation"
                           FontSize="12"
                           Text="{x:Binding ControlDetail}"
                           VerticalTextAlignment="Center">
                    </Label>
                </Grid>
            </Border>
        </DataTemplate>
    </app:BasePage.Resources>

    <ScrollView>
        <VerticalStackLayout Spacing="20">
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <Label Text="{x:Binding ControlInformation.ControlDetail}" />
            </Frame>
            <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="How it works" />

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="ObservableProperty attribute" />
                    <CollectionView ItemsSource="{x:StaticResource ObservableProperty}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Text="This is toolkit format" />
                    <app:SourceCodeExpander Code="{x:Binding ToolkitObservableProperty}" CodeType="CSharp" />
                    <Label Text="And it will generate an observable property like this:" />
                    <app:SourceCodeExpander Code="{x:Binding BuildinGenerateObservableProperty}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="On property change" />
                    <CollectionView ItemsSource="{x:StaticResource OnPropertyChange}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Text="This is toolkit format" />
                    <app:SourceCodeExpander Code="{x:Binding ToolkitCodeSetup}" CodeType="CSharp" />
                    <Label Text="The generate code equal something like this in build-in:" />
                    <app:SourceCodeExpander Code="{x:Binding BuildinCodeSetup}" CodeType="CSharp" />
                    <Label Text="This is tool kit usage:" />
                    <app:SourceCodeExpander Code="{x:Binding ToolkitCodeUsage}" CodeType="CSharp" />
                    <Label Text="And it will equal something like this in build-in:" />
                    <app:SourceCodeExpander Code="{x:Binding BuildinCodeUsage}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <ScrollView>
                    <VerticalStackLayout Spacing="20">
                        <Label Text="This is example for using OnPropertyChange"/>
                        <SearchBar x:Name="SearchBar"
                                   Text="{x:Binding SearchText}"
                                   Placeholder="Search items..."/>
                        <CollectionView ItemsSource="{x:Binding ControlGroupList}"
                                        ItemTemplate="{x:StaticResource ControlInfoCollectionView}"/>
                        <app:SourceCodeExpander CodeType="Xaml" Code="{x:Binding SearchingXamlCode}" />
                        <app:SourceCodeExpander CodeType="CSharp" Code="{x:Binding SearchingCSharpCode}" />
                    </VerticalStackLayout>
                </ScrollView>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Notifying dependent properties" />
                    <CollectionView ItemsSource="{x:StaticResource NotifyPropertyChangedFor}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Text="This is toolkit format" />
                    <app:SourceCodeExpander Code="{x:Binding ToolkitNotifyingDependentProperties}" CodeType="CSharp" />
                    <Label Text="This will result in a generated property equivalent to this:" />
                    <app:SourceCodeExpander Code="{x:Binding BuildinGenerateNotifyingDependentProperties}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Notifying dependent commands" />
                    <CollectionView ItemsSource="{x:StaticResource NotifyCanExecuteChangedFor}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Text="This is toolkit format" />
                    <app:SourceCodeExpander Code="{x:Binding ToolkitNotifyingDependentCommands}" CodeType="CSharp" />
                    <Label Text="This will result in a generated property equivalent to this:" />
                    <app:SourceCodeExpander Code="{x:Binding BuildinGenerateNotifyingDependentCommands}" CodeType="CSharp" />
                    <Label Text="Note that, in order for this to work, the target command has to be some IRelayCommand property." />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Requesting property validation" />
                    <CollectionView ItemsSource="{x:StaticResource NotifyDataErrorInfo}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Text="This is toolkit format" />
                    <app:SourceCodeExpander Code="{x:Binding ToolkitRequestingPropertyValidation}" 
                                            CodeType="CSharp"/>
                    <Label Text="And it will generate an observable property like this:" />
                    <app:SourceCodeExpander Code="{x:Binding BuildinGenerateRequestingPropertyValidation}" 
                                            CodeType="CSharp"/>
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="20">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Sending notification messages" />
                    <CollectionView ItemsSource="{x:StaticResource NotifyPropertyChangedRecipients}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <ScrollView>
                    <VerticalStackLayout Spacing="20">
                        <Label Text="This is toolkit format" />
                        <app:SourceCodeExpander Code="{x:Binding ToolkitSendingNotificationMessages}" CodeType="CSharp" />
                        <Label Text="This will result in the following property being generated:" />
                        <app:SourceCodeExpander Code="{x:Binding BuildinGenerateSendingNotificationMessages}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </ScrollView>
            </Frame>
        </VerticalStackLayout>
    </ScrollView>
</app:BasePage>