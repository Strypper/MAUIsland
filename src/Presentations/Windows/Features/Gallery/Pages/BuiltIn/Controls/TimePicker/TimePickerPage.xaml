<?xml version="1.0" encoding="utf-8" ?>
<core:BasePage
    x:Class="MAUIsland.TimePickerPage"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:app="clr-namespace:MAUIsland"
    xmlns:core="clr-namespace:MAUIsland.Core;assembly=MAUIsland.Core"
    Title="Time Picker"
    Padding="20"
    x:DataType="app:TimePickerPageViewModel"
    BackgroundColor="Transparent">
    <core:BasePage.ToolbarItems>
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.GitHubUrl}"
            IconImageSource="githublogo.png"
            Text="Source code" />
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.DocumentUrl}"
            IconImageSource="microsoft.png"
            Text="Original Document" />
    </core:BasePage.ToolbarItems>

    <core:BasePage.Resources>
        <app:TimeOnyToTimeSpanConverter x:Key="TimeOnyToTimeSpanConverter" />

        <x:String x:Key="PropertiesListHeader">
            TimePicker defines the following properties:
        </x:String>

        <x:String x:Key="ReportIssueToMauiTeamLink">
            https://github.com/dotnet/maui/issues/new/choose
        </x:String>

        <x:String x:Key="PropertiesListFooter">
            These properties are backed by BindableProperty objects, which means that they can be targets of data bindings, and styled.
        </x:String>

        <x:String x:Key="TimeOnlyDataTypeInfo">
            The TimeOnly struct is used to represent a time that is independent of the date. For example, imagine creating an alarm clock app that lets the user create a reoccurring alarm. In this situation, we want to store the time of day when the alarm should sound, but the date is irrelevant.
        </x:String>

        <x:String x:Key="TimeOnlyDataTypeInfo1">
            The TimeOnly type has several constructor overloads. The more common ones that I expect most developers will use allow us to create a date accepting either the hour and minute for the time, the hour, minute and second, or the hour, minute, second and millisecond.
        </x:String>

        <x:Array x:Key="PropertyItemsSource" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[
                <strong style="color:blue">Time</strong>, of type <strong style="color:blue">TimeSpan</strong>, the selected time, which defaults to a <strong style="color:blue">TimeSpan</strong> of 0. The <strong style="color:blue">TimeSpan</strong> type indicates a duration of time since midnight.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">Format</strong>, of type <strong style="color:blue">string</strong>, a standard or custom .NET formatting string, which defaults to "t", the short time pattern.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">TextColor</strong>, of type <strong style="color:blue">Color</strong>, the color used to display the selected time.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">FontAttributes</strong>, of type <strong style="color:blue">FontAttributes</strong>, which defaults to FontAtributes.None.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">FontFamily</strong>, of type <strong style="color:blue">string</strong>, which defaults to null.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">FontSize</strong>, of type <strong style="color:blue">double</strong>, which defaults to -1.0.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">CharacterSpacing</strong>, of type <strong style="color:blue">double</strong>, is the spacing between characters of the TimePicker text.
                    ]]>
            </x:String>
        </x:Array>

        <DataTemplate x:Key="ControlIssueItemTemplate" x:DataType="core:ControlIssueModel">
            <Border
                Padding="20"
                BackgroundColor="#0a0c10"
                StrokeShape="RoundRectangle 4">
                <VerticalStackLayout Spacing="10">
                    <Label
                        FontAttributes="Bold"
                        FontSize="Micro"
                        LineBreakMode="CharacterWrap"
                        MaxLines="2"
                        Text="{x:Binding Title,
                                         Mode=OneWay}"
                        TextDecorations="Underline"
                        ToolTipProperties.Text="{x:Binding Title,
                                                           Mode=OneWay}" />
                    <HorizontalStackLayout Spacing="8">
                        <ImageButton
                            CornerRadius="25"
                            HeightRequest="10"
                            Source="{x:Binding AvatarUrl,
                                               Mode=OneWay}"
                            VerticalOptions="Center"
                            WidthRequest="10" />
                        <Label Text="{x:Binding OwnerName, Mode=OneWay}" VerticalOptions="Center" />
                    </HorizontalStackLayout>
                    <Label HorizontalOptions="End" Text="{x:Binding CreatedDate, Mode=OneWay}" />
                </VerticalStackLayout>
            </Border>
        </DataTemplate>

        <LinearItemsLayout
            x:Key="ControlIssueLayout"
            ItemSpacing="5"
            Orientation="Vertical" />
    </core:BasePage.Resources>


    <RefreshView Command="{x:Binding RefreshCommand}" IsRefreshing="{x:Binding IsBusy, Mode=OneWay}">
        <ScrollView>
            <Grid ColumnDefinitions="310, *" ColumnSpacing="20">
                <Grid RowDefinitions="90, 540, 120" RowSpacing="10">
                    <Border
                        Padding="20"
                        BackgroundColor="#272b33"
                        StrokeShape="RoundRectangle 4">
                        <Grid>
                            <HorizontalStackLayout Spacing="10">
                                <Image
                                    HeightRequest="25"
                                    Source="githublogo.png"
                                    VerticalOptions="Center"
                                    WidthRequest="25" />

                                <Label
                                    HorizontalOptions="Start"
                                    Style="{x:StaticResource DocumentSectionTitleStyle}"
                                    Text="Issues"
                                    VerticalOptions="Center" />
                            </HorizontalStackLayout>
                            <Border
                                BackgroundColor="OrangeRed"
                                HeightRequest="40"
                                HorizontalOptions="End"
                                StrokeShape="RoundRectangle 20"
                                VerticalOptions="Center"
                                WidthRequest="40">
                                <Label
                                    FontAttributes="Bold"
                                    HorizontalOptions="Center"
                                    Text="{x:Binding ControlIssues.Count,
                                                     Mode=OneWay}"
                                    VerticalOptions="Center" />
                            </Border>
                        </Grid>
                    </Border>
                    <CollectionView
                        Grid.Row="1"
                        Margin="0,0,0,0"
                        EmptyView="{x:Binding EmptyViewText,
                                              Mode=OneWay}"
                        ItemTemplate="{x:StaticResource ControlIssueItemTemplate}"
                        ItemsLayout="{x:StaticResource ControlIssueLayout}"
                        ItemsSource="{x:Binding ControlIssues,
                                                Mode=OneWay}"
                        SelectedItem="{x:Binding SelectedControlIssue,
                                                 Mode=TwoWay}"
                        SelectionChangedCommand="{x:Binding OpenUrlCommand}"
                        SelectionChangedCommandParameter="{x:Binding SelectedControlIssue.IssueLinkUrl,
                                                                     Mode=OneWay}"
                        SelectionMode="Single"
                        VerticalOptions="Start" />
                    <Border
                        Grid.Row="2"
                        Margin="0,0,0,10"
                        Padding="20"
                        BackgroundColor="#272b33"
                        StrokeShape="RoundRectangle 4">
                        <VerticalStackLayout Spacing="5">
                            <Label
                                HorizontalOptions="Center"
                                HorizontalTextAlignment="Center"
                                Text="Found a new bug?"
                                TextColor="White"
                                TextDecorations="Underline" />
                            <Button
                                Command="{x:Binding OpenUrlCommand}"
                                CommandParameter="{x:StaticResource ReportIssueToMauiTeamLink}"
                                Text="Report to the MAUI team" />
                        </VerticalStackLayout>
                    </Border>
                </Grid>
                <VerticalStackLayout Grid.Column="1" Spacing="20">
                    <Border Padding="20" StrokeShape="RoundRectangle 4">
                        <Label FontSize="Subtitle" Text="{x:Binding ControlInformation.ControlDetail}" />
                    </Border>

                    <Border Padding="20" StrokeShape="RoundRectangle 4">
                        <CollectionView
                            Footer="{x:StaticResource PropertiesListFooter}"
                            Header="{x:StaticResource PropertiesListHeader}"
                            ItemsSource="{x:StaticResource PropertyItemsSource}"
                            Style="{x:StaticResource PropertiesListStyle}" />
                    </Border>

                    <Border Padding="20" StrokeShape="RoundRectangle 4">
                        <VerticalStackLayout Spacing="10">
                            <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Simple date picker" />
                            <TimePicker Time="4:15:26" />
                            <core:SourceCodeExpander Code="{x:Binding SimpleTimePickerXamlCode}" />
                            <Label Text="You can also you use C# to create it" />
                            <core:SourceCodeExpander Code="{x:Binding SimpleTimePickerCSharpCode}" CodeType="CSharp" />
                        </VerticalStackLayout>
                    </Border>

                    <Border Padding="20" StrokeShape="RoundRectangle 4">
                        <VerticalStackLayout Spacing="10">
                            <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="TIMEONLY in .NET 6" />
                            <Label Text="{x:StaticResource TimeOnlyDataTypeInfo}" />
                            <Label Text="{x:StaticResource TimeOnlyDataTypeInfo1}" />
                            <core:SourceCodeExpander Code="{x:Binding TimeOnlyContrutorsExampleCSharpCode}" CodeType="CSharp" />
                            <Label Text="For example, to represent 10:30am in the morning, we can create the following TimeOnly instance." />
                            <core:SourceCodeExpander Code="{x:Binding TimeOnlyExampleCSharpCode}" CodeType="CSharp" />
                            <HorizontalStackLayout Spacing="10">
                                <TimePicker Time="{x:Binding TimeOnlyTime, Mode=TwoWay, Converter={x:StaticResource TimeOnyToTimeSpanConverter}}" />
                                <Label Text="{x:Binding TimeOnlyTime}" />
                            </HorizontalStackLayout>
                            <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="TimeOnyToTimeSpanConverter" />
                            <core:SourceCodeExpander Code="{x:Binding TimeOnyToTimeSpanConverterCSharpCode}" CodeType="CSharp" />
                        </VerticalStackLayout>
                    </Border>
                </VerticalStackLayout>
            </Grid>
        </ScrollView>
    </RefreshView>
</core:BasePage>