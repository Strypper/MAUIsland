<?xml version="1.0" encoding="utf-8" ?>
<core:BasePage
    x:Class="MAUIsland.StateContainerPage"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:app="clr-namespace:MAUIsland"
    xmlns:core="clr-namespace:MAUIsland.Core;assembly=MAUIsland.Core"
    xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
    Title="State Container"
    Padding="10"
    x:DataType="app:StateContainerPageViewModel"
    BackgroundColor="Transparent">

    <core:BasePage.ToolbarItems>
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.GitHubUrl}"
            IconImageSource="githublogo.png"
            Text="Source code" />
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.DocumentUrl}"
            IconImageSource="microsoft.png"
            Text="Original Document" />
    </core:BasePage.ToolbarItems>

    <core:BasePage.Resources>

        <x:String x:Key="GetStarted">
            The StateContainer attached properties enables the user to turn any layout element like a VerticalStackLayout, HorizontalStackLayout, or Grid into a state-aware layout. Each state-aware layout contains a collection of View derived elements. These elements can be used as templates for different states defined by the user. Whenever the CurrentState string property is set to a value that matches the StateKey property of one of the View elements, its contents will be displayed instead of the main content. When CurrentState is set to null or empty string, the main content is displayed.
        </x:String>

        <x:String x:Key="Important1">
            When using StateContainer with a Grid, any defined states inside it will automatically span every row and column of the Grid.
        </x:String>

        <x:String x:Key="Using">
            Below is an example UI created using XAML. This sample UI is connected to the below ViewModel, StateContainerViewModel.
        </x:String>

        <x:String x:Key="C#">
            Below is the same UI as the XAML, above, created using C# Markup. This sample UI is connected to the below ViewModel, StateContainerViewModel.
        </x:String>

        <x:String x:Key="ViewModel">
            When using an ICommand to change CurrentState (e.g. when using Button.Command to change states), we recommended using CanStateBeChanged for ICommand.CanExecute(). Below is an MVVM example using the MVVM Community Toolkit:
        </x:String>

        <x:String x:Key="ViewModel1">
            By default StateContainer changes state without animation. To add a custom animation you can use the ChangeStateWithAnimation method:
        </x:String>

        <x:String x:Key="Customizing">
            A DockLayout container supports arbitrary Padding as well as several DockLayout-specific properties for customization. An example in XAML with all available options is given here:
        </x:String>

        <x:Array x:Key="PropertyItemsSource" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">StateViews</strong> the available View elements to be used as state templates.]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">CurrentState</strong>, determines which View element with the corresponding StateKey should be displayed. Warning: CurrentState cannot be changed while a state change is in progress   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">CanStateChange</strong>, property is a <strong style="color:blue">bool</strong>, when true, the CurrentState property can be changed. When false, cannot be changed because it is currently changing. Warning: If CurrentState is changed when CanStateChanged is false, a StateContainerException is thrown.  ]]>
            </x:String>
        </x:Array>
    </core:BasePage.Resources>

    <ScrollView>
        <VerticalStackLayout Spacing="20">
            <Border Padding="20" StrokeShape="RoundRectangle 4">
                <Label FontSize="Subtitle" Text="{x:Binding ControlInformation.ControlDetail}" />
            </Border>

            <Border Padding="20" StrokeShape="RoundRectangle 4">
                <VerticalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Properties" />
                    <CollectionView ItemsSource="{x:StaticResource PropertyItemsSource}" Style="{x:StaticResource PropertiesListStyle}" />
                </VerticalStackLayout>
            </Border>

            <Border
                Padding="10"
                BackgroundColor="#004173"
                StrokeShape="RoundRectangle 4">
                <VerticalStackLayout>
                    <Label
                        Style="{x:StaticResource DocumentSectionTitleStyle}"
                        Text="Important"
                        TextColor="White" />
                    <Label Text="{x:StaticResource Important1}" TextColor="White" />
                </VerticalStackLayout>
            </Border>

            <Border Padding="20" StrokeShape="RoundRectangle 4">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Using the StateContainer" />
                    <Label Text="{x:StaticResource Using}" />
                    <VerticalStackLayout toolkit:StateContainer.CanStateChange="{Binding CanStateChange}" toolkit:StateContainer.CurrentState="{Binding CurrentState}">
                        <toolkit:StateContainer.StateViews>
                            <VerticalStackLayout toolkit:StateView.StateKey="Loading">
                                <ActivityIndicator IsRunning="True" />
                                <Label Text="Loading Content..." />
                            </VerticalStackLayout>
                            <Label toolkit:StateView.StateKey="Success" Text="Success!" />
                        </toolkit:StateContainer.StateViews>
                        <Label Text="Default Content" />
                    </VerticalStackLayout>
                    <Button Command="{Binding ChangeStateCommand}" Text="Change State" />
                    <Label Text="XAML:" />
                    <core:SourceCodeExpander Code="{x:Binding XamlStateContainerLayout}" CodeType="Xaml" />
                    <Label Text="View Model:" />
                    <core:SourceCodeExpander Code="{x:Binding CsharpStateContainerLayout}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Border>
        </VerticalStackLayout>
    </ScrollView>
</core:BasePage>