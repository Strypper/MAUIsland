<?xml version="1.0" encoding="utf-8" ?>
<core:BasePage
    x:Class="MAUIsland.RelayCommandPage"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:app="clr-namespace:MAUIsland"
    xmlns:core="clr-namespace:MAUIsland.Core;assembly=MAUIsland.Core"
    xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
    Title="RelayCommand"
    Padding="20"
    x:DataType="core:RelayCommandPageViewModel"
    BackgroundColor="Transparent"
    Loaded="BasePage_Loaded">

    <core:BasePage.ToolbarItems>
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.GitHubUrl}"
            IconImageSource="github.png"
            Text="Source code" />
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.DocumentUrl}"
            IconImageSource="microsoft.png"
            Text="Original Document" />
    </core:BasePage.ToolbarItems>

    <core:BasePage.Resources>
        <x:String x:Key="PropertiesListFooter">
            It will also do so with an optimized implementation, so the end result will be even faster.
        </x:String>

        <x:Array x:Key="RelayCommand" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The <strong style="color:blue">RelayCommand</strong> attribute can be used to annotate a field in a partial type    ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="RelayCommandParameter" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The <strong style="color:blue">RelayCommand</strong> attribute supports creating commands for methods with a parameter. In that case, it will automatically change the generated command to be an IRelayCommand instead, accepting a parameter of the same type. ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="AsynchronousCommand" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The <strong style="color:blue">RelayCommand</strong> command also supports wrapping asynchronous methods, via the <strong style="color:blue">IAsyncRelayCommand</strong> and <strong style="color:blue">IAsyncRelayCommand</strong> interfaces. This is handled automatically whenever a method returns a <strong style="color:blue">Task</strong> type.   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="EnablingAndDisablingCommand" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   It is often useful to be able to disable commands, and to then later on invalidate their state and have them check again whether they can be executed or not. In order to support this, the <strong style="color:blue">RelayCommand</strong> attribute exposes the <strong style="color:blue">CanExecute</strong> property, which can be used to indicate a target property or method to use to evaluate whether a command can be executed   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="HandlingConcurrentExecution" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   Whenever a command is asynchronous, it can be configured to decide whether to allow concurrent executions or not. When using the  <strong style="color:blue">RelayCommand</strong> attribute, this can be set via the <strong style="color:blue">AllowConcurrentExecutions</strong> property. The default is false, meaning that until an execution is pending, the command will signal its state as being disabled. If it instead is set to true, any number of concurrent invocations can be queued.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   Note that if a command accepts a cancellation token, a token will also be canceled if a concurrent execution is requested. The main difference is that if concurrent executions are allowed, the command will remain enabled and it will start a new requested execution without waiting for the previous one to actually complete.   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="HandlingAsynchronousException" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   <strong style="color:blue">Await and rethrow (default)</strong>: when the command awaits the completion of an invocation, any exceptions will naturally be thrown on the same synchronization context. That usually means that exceptions being thrown would just crash the app, which is a behavior consistent with that of synchronous commands (where exceptions being thrown will also crash the app).   ]]>
            </x:String>
            <x:String>
                <![CDATA[   <strong style="color:blue">Flow exceptions to task scheduler</strong>: if a command is configured to flow exceptions to the task scheduler, exceptions being thrown will not crash the app, but instead they will both become available through the exposed <strong style="color:blue">IAsyncRelayCommand.ExecutionTask</strong> as well as bubbling up to the <strong style="color:blue">TaskScheduler.UnobservedTaskException</strong>. This enables more advanced scenarios (such as having UI components bind to the task and display different results based on the outcome of the operation), but it is more complex to use correctly.   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="HandlingAsynchronousExceptionExplanation" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   In the <strong style="color:blue">Await and rethrow</strong> approach, if an exception occurs during the execution of an awaited asynchronous method, that exception is immediately caught and can be handled in the catch block of the calling method.   ]]>
            </x:String>
            <x:String>
                <![CDATA[   In contrast, when you use <strong style="color:blue">FlowExceptionsToTaskScheduler = true</strong>, exceptions are not immediately thrown. Instead, they are captured and propagated to the task scheduler. The task scheduler can then decide how to handle these exceptions, which might involve storing them until the task is awaited or the <strong style="color:blue">Task.Exception</strong> property is accessed.   ]]>
            </x:String>
        </x:Array>
        <x:Array x:Key="CancelCommandsForAsynchronousOperation" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[   The ability to request a cancel command is an <strong style="color:blue">ICommand</strong> wrapping an async relay command that can be used to request the cancellation of an operation. This command will automatically signal its state to reflect whether or not it can be used at any given time. For instance, if the linked command is not executing, it will report its state as also not being executable.  ]]>
            </x:String>
        </x:Array>
    </core:BasePage.Resources>


    <SwipeView>
        <SwipeView.LeftItems>
            <SwipeItems Mode="Execute">
                <SwipeItem
                    BackgroundColor="DarkGray"
                    Command="{x:Binding BackCommand}"
                    IconImageSource="{x:StaticResource FluentArrowCircleLeft48Regular}"
                    Text="Go back" />
            </SwipeItems>
        </SwipeView.LeftItems>
        <ScrollView>
            <VerticalStackLayout Spacing="20">
                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <Label FontSize="Subtitle" Text="{x:Binding ControlInformation.ControlDetail}" />
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="RelayCommand attribute" />
                        <CollectionView ItemsSource="{x:StaticResource RelayCommand}" Style="{x:StaticResource PropertiesListStyle}" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Text="This is toolkit format" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommand}" CodeType="CSharp" />
                        <Label Text="And it will generate a command like this:" />
                        <core:SourceCodeExpander Code="{x:Binding BuildinGenerate}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="RelayCommand with parameter" />
                        <CollectionView ItemsSource="{x:StaticResource RelayCommandParameter}" Style="{x:StaticResource PropertiesListStyle}" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Text="This is toolkit format" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommandWithParameter}" CodeType="CSharp" />
                        <Label Text="And it will generate a command like this:" />
                        <core:SourceCodeExpander Code="{x:Binding BuildinGenerateCommandWithParameter}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="RelayCommand with Asynchronous" />
                        <CollectionView ItemsSource="{x:StaticResource AsynchronousCommand}" Style="{x:StaticResource PropertiesListStyle}" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Text="This is toolkit format" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommandWithAsynchronous}" CodeType="CSharp" />
                        <Label Text="And it will generate a command like this:" />
                        <core:SourceCodeExpander Code="{x:Binding BuildinGenerateCommandWithAsynchronous}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="RelayCommand with Enabling and Disabling" />
                        <CollectionView ItemsSource="{x:StaticResource EnablingAndDisablingCommand}" Style="{x:StaticResource PropertiesListStyle}" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Text="This is toolkit format" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommandWithEnablingDisabling}" CodeType="CSharp" />
                        <Label Text="And it will generate an observable property like this:" />
                        <core:SourceCodeExpander Code="{x:Binding BuildinGenerateCommandWithEnablingDisabling}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Text="this is how a command can be bound to a property to control its state" />
                        <Button
                            Command="{Binding ToolKitWithEnablingDisablingCommand}"
                            CommandParameter="{Binding ExampleForControlPropertyState2}"
                            Text="Example Property For Control Property State Command 2" />
                        <core:SourceCodeExpander Code="{x:Binding Example2BoundPropertyToControlXaml}" CodeType="Xaml" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitControlPropertyState2}" CodeType="CSharp" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommandWithEnablingDisabling}" CodeType="CSharp" />
                        <Button
                            Command="{Binding ToolKitWithEnablingDisablingCommand}"
                            CommandParameter="{Binding ExampleForControlPropertyState1}"
                            Text="Example Property For Control Property State Command 1" />
                        <core:SourceCodeExpander Code="{x:Binding Example1BoundPropertyToControlXaml}" CodeType="Xaml" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitControlPropertyState1}" CodeType="CSharp" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommandWithEnablingDisabling}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Handling concurrent executions" />
                        <CollectionView ItemsSource="{x:StaticResource HandlingConcurrentExecution}" Style="{x:StaticResource PropertiesListStyle}" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Text="This is toolkit format" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommandWithAllowConcurrentExecution}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Handling asynchronous exceptions" />
                        <CollectionView ItemsSource="{x:StaticResource HandlingAsynchronousException}" Style="{x:StaticResource PropertiesListStyle}" />
                        <Label Text="Explanation" />
                        <CollectionView ItemsSource="{x:StaticResource HandlingAsynchronousExceptionExplanation}" Style="{x:StaticResource PropertiesListStyle}" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Text="Await and rethrow (default)" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommandWithExceptionDefault}" CodeType="CSharp" />
                        <Label Text="Flow exceptions to task scheduler" />
                        <Label Text="In this case, the try/catch is not needed, as exceptions will not crash the app anymore. Note that this will also cause other unrelated exceptions to not be rethrown automatically." />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommandWithExceptionScheduler}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Cancel commands for asynchronous operations" />
                        <CollectionView ItemsSource="{x:StaticResource CancelCommandsForAsynchronousOperation}" Style="{x:StaticResource PropertiesListStyle}" />
                    </VerticalStackLayout>
                </Border>

                <Border Padding="20" StrokeShape="RoundRectangle 4">
                    <VerticalStackLayout Spacing="20">
                        <Label Text="This is toolkit format" />
                        <core:SourceCodeExpander Code="{x:Binding ToolkitRelayCommandWithCancel}" CodeType="CSharp" />
                        <Label Text="And it will equal to this:" />
                        <core:SourceCodeExpander Code="{x:Binding BuildinEquivalentCommandWithCancel}" CodeType="CSharp" />
                    </VerticalStackLayout>
                </Border>
            </VerticalStackLayout>
        </ScrollView>

    </SwipeView>
</core:BasePage>